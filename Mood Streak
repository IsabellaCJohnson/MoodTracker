<div class="outer-container">
  <div class="box">
  <div class="container">
    <h1 id="header">Mood Streak</h1>
    <h2>How are you today?</h2>
    <div class="mood-buttons">
      <button class="emoji-button" data-mood="Happy">😄</button>
      <button class="emoji-button" data-mood="Calm">🧘‍♀️</button>
      <button class="emoji-button" data-mood="Energetic">🤸‍♀️</button>
      <button class="emoji-button" data-mood="Sad">☔️</button>
      <button class="emoji-button" data-mood="Angry">😾</button>
      <button class="emoji-button" data-mood="Anxious">😣</button>
      <button class="emoji-button" data-mood="Neutral">😐</button>
    </div>
  </div>
</div>
<div id="tooltip" class="tooltip"></div>
<div id="advice" class="advice"></div>
<ul id="todo-list" class="todo-list"></ul>
<div id="counter" class="counter"></div>
<div id="encouragement" class="encouragement"></div>
<div id="streak"></div>
<div id="log" class="log"></div>
</div>

@import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Roboto:wght@400;700&display=swap');

body {
  /*min-height: 100vh;*/
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  transition: background-color 0.3s;
  font-family: "Roboto", sans-serif;
  background-color: white;
}

#header {
  text-align: center;
  font-family: "Lato", sans-serif;
}

h2 {
  font-family: "Lato", sans-serif;
}

.box {
  padding: 20px;
  border-radius: 10px;
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
  background-color: white;
}

.container {
  text-align: center;
}

.mood-buttons {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  margin-bottom: 20px;
}

.emoji-button {
  font-size: 2em;
  margin: 10px;
  border: none;
  background: none;
  cursor: pointer;
  transition: transform 0.2s;
}

.emoji-button:hover {
  opacity: 0.8;
  transform: scale(1.1);
}

.tooltip {
  position: absolute;
  background-color: black;
  color: white;
  padding: 5px 10px;
  border-radius: 5px;
  display: none;
  font-size: 1em;
  pointer-events: none;
  z-index: 1000;
}

.advice {
  margin-top: 20px;
  font-size: 1.2em;
  text-align: center;
  max-width: 64ch;
}


.todo-list {
  list-style-type: none;
  padding: 0;
  margin-top: 20px;
  font-size: 1.2em;
}

.todo-list li {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 10px;
}

.todo-list button {
  margin-left: 10px;
  padding: 5px 10px;
  font-size: 1em;
  cursor: pointer;
  font-family: inherit;
}

.todo-list li.completed button {
  background-color: green;
  color: white;
  text-decoration: line-through;
}

.counter {
  margin-top: 20px;
  font-size: 1.2em;
  text-align: center;
  color: darkblue;
}

.encouragement {
  margin-top: 20px;
  font-size: 1.2em;
  text-align: center;
  color: green;
}

.log {
  margin-top: 0.5rem;
  font-size: 1em;
  text-align: center;
  color: darkgreen;
}

/* Styles for different moods */
.mood-happy {
  background-color: yellow;
}

.mood-calm {
  background-color: lightgreen;
}

.mood-energetic {
  background-color: orange;
}

.mood-sad {
  background-color: blue;
}

.mood-angry {
  background-color: red;
}

.mood-anxious {
  background-color: lightcoral;
  
}

.mood-neutral {
  background-color: gray;
}

#streak {
  padding: 0.5rem 0;
  margin-top: 1rem;
  text-align: left;
  font-size: 1rem;
}

div[data-date] {
  display: flex;
  justify-content: space-between;
  align-items: center;
  text-align: left;
  margin-bottom: 1rem;
  font-size: 1rem;
}

div[data-date] span {
  flex-basis: 33.3%;
}

.delete-btn {
  padding: 0.5rem 1rem;
  border-radius: 10px;
  border: none;
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
  background-color: grey;
  transition: background-color 0.3s;
  color: white;
  font-size: 1rem;
  font-family: inherit;
}

.delete-btn:hover {
  background-color: dimgrey;
  
}

.outer-container {
  background-color: #f2f2f2;
  padding: 2rem;
  border-radius: 10px;
  border: none;
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
  color: #28241C;
}

#encouragement {
  margin-bottom: 1rem;
}

document.addEventListener('DOMContentLoaded', () => {
  
  // Select dom elements and store in variables in global scope for use in multiple functions
  const buttons = document.querySelectorAll('.emoji-button');
  const tooltip = document.getElementById('tooltip');
  const body = document.body;
  const adviceDiv = document.getElementById('advice');
  const todoList = document.getElementById('todo-list');
  const counterDiv = document.getElementById('counter');
  const encouragementDiv = document.getElementById('encouragement');
  const logDiv = document.getElementById('log');
  const streakContainer = document.querySelector("#streak");
  
  // Initialise an variable to store an array of the dates that moods are logged
  let dateArray = [];
  
  // Object containing advice and a to-do list with a value of an array of tasks for each mood
  const moodAdvice = {
    Happy: {
      advice: "Embrace your happiness and use this positive energy to uplift others around you. Happiness is contagious, so share it freely. It's a great day to tackle tasks that require creativity and collaboration.",
      todo: [
        "Reach out to a friend or family member to share your joy.",
        "Engage in a creative project (art, writing, music).",
        "Go for a walk in nature.",
        "Tackle a challenging task with your positive energy.",
        "Do something kind for someone else."
      ]
    },
    Calm: {
      advice: "When you feel calm, it's an excellent opportunity to focus on mindfulness and introspection. Use this peaceful state to reflect on your goals, meditate, or simply enjoy the present moment.",
      todo: [
        "Practice meditation or deep breathing exercises.",
        "Enjoy a quiet walk or time in nature.",
        "Reflect on your goals through journaling.",
        "Engage in a gentle, mindful activity like yoga.",
        "Spend quality time with loved ones."
      ]
    },
    Energetic: {
      advice: "When you’re full of energy, it’s the perfect time to take on challenging tasks or start new projects. Use this momentum to get ahead in your work or personal goals.",
      todo: [
        "Tackle a high-priority project.",
        "Exercise or engage in a physical activity.",
        "Declutter a space in your home.",
        "Start a new hobby or learn something new.",
        "Plan and prepare meals for the week."
      ]
    },
    Sad: {
      advice: "Allow yourself to feel your emotions without judgment. It’s okay to have a down day. Use this time to reflect and understand what’s causing your sadness.",
      todo: [
        "Write in a journal to express your feelings.",
        "Watch a comforting movie or read a favorite book.",
        "Take a warm bath or indulge in a soothing activity.",
        "Reach out to someone you trust for support.",
        "Practice deep breathing to calm your mind."
      ]
    },
    Angry: {
      advice: "Anger can be a powerful emotion, but it’s essential to channel it constructively. Take time to cool down and understand the root of your anger.",
      todo: [
        "Go for a run or do a workout.",
        "Write down your thoughts to gain clarity.",
        "Practice deep breathing to calm your nervous system.",
        "Take a break from the situation.",
        "Reflect on the source of your anger."
      ]
    },
    Anxious: {
      advice: "When feeling anxious, it’s important to ground yourself in the present moment. Focus on activities that help you feel safe and secure.",
      todo: [
        "Practice grounding techniques like focusing on your breath.",
        "Break tasks into manageable steps.",
        "Avoid caffeine or stimulants.",
        "Talk to someone you trust about your worries.",
        "Engage in a calming activity like coloring."
      ]
    },
    Neutral: {
      advice: "A neutral mood is a balanced state. Use this time to focus on routine tasks or engage in hobbies that keep you content.",
      todo: [
        "Catch up on routine tasks.",
        "Engage in a hobby you enjoy.",
        "Take a short walk to clear your mind.",
        "Organize your space for the week ahead.",
        "Read a book or watch a show."
      ]
    }
  };
  
  // Load mood history from local storage when the page is first loaded
  loadMoodHistory();
  
  // Display temporary enouraging message if a task is completed, congratulate if all tasks completed
  const showEncouragementMessage = (completed, total) => {
    if (completed === total) {
      encouragementDiv.textContent = "Well done for completing your to-do list!";
    } else {
      encouragementDiv.textContent = "Great job! Keep going!";
      setTimeout(() => {
        encouragementDiv.textContent = '';
      }, 5000);
    }
  };
  
  // Update the task counter display
  const updateCounter = (completed, total) => {
    counterDiv.textContent = `You have completed ${completed} out of ${total} tasks.`;
  };

  // Log the selected mood along with the current date and time
  const logMood = (mood) => {
    const now = new Date();
    const isoString = now.toISOString();
    dateArray.push(isoString);
    calculateStreak(dateArray);
    const dateString = now.toLocaleDateString();
    const timeString = now.toLocaleTimeString();
    
    // Create a div to store the log entries and append it to the container - logdiv
    const logEntry = document.createElement('div');
    logEntry.setAttribute("data-date", isoString);
    const logSpan = document.createElement("span");
    logSpan.innerHTML = `<b>Mood:</b> ${mood}`;
    const dateSpan = document.createElement("span");
    dateSpan.textContent = `${dateString} ${timeString}`;
    logEntry.appendChild(logSpan);
    logEntry.appendChild(dateSpan);
    
    // Add a delete button for each log entry and append it logdiv
    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "Delete";
    deleteBtn.classList.add("delete-btn");
    logEntry.appendChild(deleteBtn);
    
    // Add most recent log to the top
    logDiv.insertBefore(logEntry, logDiv.firstChild);
    
    // Add event listener to handle entry deletion and update streak count if no longer an entry for that day
    deleteBtn.addEventListener("click", () => {
      const confirmDel = confirm("Are you sure you want to delete this entry?");
      if (confirmDel) {
        const itemToRemove = logEntry.getAttribute("data-date");
        const indexToRemove = dateArray.indexOf(itemToRemove);
        if (indexToRemove !== -1) {
          dateArray.splice(indexToRemove, 1);
          calculateStreak(dateArray);
        }
      logEntry.remove();
      saveMoodHistory();
      }
    });
    saveMoodHistory();
  };
  /*
  // Calculate how consecutive days a mood has been logged based on the dates stored in dateArray - original code based on calculating if 24 hours have passed
  function calculateStreak(dates) {
    if (!dates || dates.length === 0) {
      streakContainer.innerHTML = `<b>Current Streak:</b> 0 days`;
      return;
    }

    // Ensure dates are unique and sorted
    const uniqueDates = [...new Set(dates)]
      .map((dateStr) => new Date(dateStr))
      .sort((a, b) => a - b);
    
    // Initialise streak counter for current mood log
    let streak = 1;
    
    // Iterate over the date array from the end to the beginning to check for consecutive days 
    for (let i = uniqueDates.length - 1; i > 0; i--) {
      const currentDate = uniqueDates[i];
      const previousDate = uniqueDates[i - 1];
      const differenceInTime = currentDate.getTime() - previousDate.getTime();
      const differenceInDays = Math.round(
        differenceInTime / (1000 * 3600 * 24)
      );
      
      // If the difference is exactly 1 day, increment the streak counter; otherwise, stop the loop
      if (differenceInDays === 1) {
        streak++;
      } else {
        break;
      }
    }
    streak === 1 ? streakContainer.innerHTML = `<b>Current Streak:</b> ${streak} day`: streakContainer.innerHTML = `<b>Current Streak:</b> ${streak} days`;
  }*/
  
  function calculateStreak(dates) {
  if (!dates || dates.length === 0) {
    streakContainer.innerHTML = `<b>Current Streak:</b> 0 days`;
    return;
  }

  // Extract just the date part (YYYY-MM-DD) from the ISO string
  const uniqueDates = [...new Set(dates)]
    .map(dateStr => dateStr.split('T')[0]) // Get YYYY-MM-DD part
    .sort();

  let streak = 1;

  // Iterate over the date array to check for consecutive days
  for (let i = uniqueDates.length - 1; i > 0; i--) {
    const currentDateParts = uniqueDates[i].split('-');
    const previousDateParts = uniqueDates[i - 1].split('-');

    const currentDate = {
      year: parseInt(currentDateParts[0], 10),
      month: parseInt(currentDateParts[1], 10),
      day: parseInt(currentDateParts[2], 10)
    };

    const previousDate = {
      year: parseInt(previousDateParts[0], 10),
      month: parseInt(previousDateParts[1], 10),
      day: parseInt(previousDateParts[2], 10)
    };

    // Check if the current date is exactly one day after the previous date
    const isConsecutive = 
      // Check if same year, next month and previous date is last date of month
      currentDate.year === previousDate.year &&
      currentDate.month === previousDate.month &&
      currentDate.day === previousDate.day + 1 ||
      // Check if same year but next month
      (currentDate.year === previousDate.year &&
        currentDate.month === previousDate.month + 1 &&
        previousDate.day === new Date(currentDate.year, currentDate.month - 1, 0).getDate() &&
        currentDate.day === 1) ||
      // Check if it's the first of the month in a new year
      (currentDate.year === previousDate.year + 1 &&
        currentDate.month === 1 && 
        previousDate.month === 12 &&
        currentDate.day === 1 &&
        previousDate.day === 31);

    if (isConsecutive) {
      streak++;
    } else {
      break;
    }
  }

  // Display the streak
  streakContainer.innerHTML = `<b>Current Streak:</b> ${streak} ${streak === 1 ? 'day' : 'days'}`;
}

  
  // Save the current mood history to local storage
  function saveMoodHistory() {
    localStorage.setItem("moodHistory", logDiv.innerHTML);
    localStorage.setItem("moodArray", JSON.stringify(dateArray));
  }
  
  // Load the mood history from local storage and re-attach event listeners
  function loadMoodHistory() {
    const savedHistory = localStorage.getItem("moodHistory");
    console.log(savedHistory);
    const reloadDataArray = localStorage.getItem("moodArray");
    if (savedHistory && reloadDataArray) {
      logDiv.innerHTML = savedHistory;
      dateArray = JSON.parse(reloadDataArray);
      
      // Call function to re-attach event listeners
      attachDeleteEventListeners();
      calculateStreak(dateArray);
    }
  }
  
  // Re-attach delete button event listeners after loading from local storage
  function attachDeleteEventListeners() {
    const deleteBtns = document.querySelectorAll(".delete-btn");
    deleteBtns.forEach((button) => {
      button.addEventListener("click", (event) => {
        const moodItem = event.target.parentElement;
        const confirmDel = confirm(
          "Are you sure you want to delete this entry?"
        );
        if (confirmDel) {
          const itemToRemove = moodItem.getAttribute("data-date");
          const indexToRemove = dateArray.indexOf(itemToRemove);

          if (indexToRemove !== -1) {
            dateArray.splice(indexToRemove, 1);
            calculateStreak(dateArray);
          }

          moodItem.remove();
          saveMoodHistory();
        }
      });
    });
  }

  // Add event listeners to each mood button to show tooltips on mouseover and log mood
  buttons.forEach(button => {
    button.addEventListener('mouseenter', () => {
      tooltip.textContent = button.getAttribute('data-mood');
      tooltip.style.display = 'block';
      tooltip.style.left = `${button.getBoundingClientRect().left}px`;
      tooltip.style.top = `${button.getBoundingClientRect().top - 30}px`;
    });

    button.addEventListener('mouseleave', () => {
      tooltip.style.display = 'none';
    });

    button.addEventListener('click', () => {
      const mood = button.getAttribute('data-mood');
      body.className = `mood-${mood.toLowerCase()}`;
      const { advice, todo } = moodAdvice[mood];
      adviceDiv.textContent = advice;
      todoList.innerHTML = '';

      todo.forEach(task => {
        const li = document.createElement('li');
        li.textContent = task;
        const button = document.createElement('button');
        button.textContent = 'Complete';
        button.addEventListener('click', () => {
          li.classList.toggle('completed');
          const completedTasks = todoList.querySelectorAll('.completed').length;
          updateCounter(completedTasks, todo.length);
          showEncouragementMessage(completedTasks, todo.length);
        });
        li.appendChild(button);
        todoList.appendChild(li);
      });

      updateCounter(0, todo.length);
      logMood(mood);
    });
  });
  
  // Test
  /*
  const dateList = [
  '2024-08-13T23:59:00Z',
  '2024-08-14T00:01:00Z',
  '2024-08-15T22:00:00Z',
  '2024-08-16T21:00:00Z',
  '2024-08-17T20:30:00Z',
  '2024-08-18T19:30:00Z',
  '2024-08-19T23:59:00Z'
];


calculateStreak(dateList); */
  
});
